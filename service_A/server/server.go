package server

import (
    "fmt"
    "net"
    "os"
    "log"
    "context"
    "github.com/joho/godotenv"
    service_av1 "github.com/myk4040okothogodo/JumiaABmicroservices/gen/go/service_A"
    "google.golang.org/grpc"
    "google.golang.org/grpc/reflection"
)


const (
    defaultPort    = "60002"
)




type Server struct {}

func NewServer(ctx context.Context)(*Server, error){
    return &Server{
    }, nil
}

func parseEnvVars(key string) string {
    //load .env file
    err := godotenv.Load(".env")
    if err != nil {
        log.Printf("Error loading from .env file %s", err )
    }
    return os.Getenv(key)
}


func (s *Server) Run() {
    port := parseEnvVars("API_PORT")
    if port == "" {
        log.Printf("Failed to load 'API_PORT' from .env file reverting to defaultport %s:", defaultPort)
        port = defaultPort
    }

    listener, err := net.Listen("tcp", fmt.Sprintf("0.0.0.0:%s", port))
    if err != nil {
        log.Print("net.Listen failed")
        return
    }

    grpcServer := grpc.NewServer()
    service_av1.RegisterServiceA_APIServer(grpcServer, s)    // use autogenerated code to register the server
    reflection.Register(grpcServer)

    log.Printf("Starting 'Service_A' server on port %s :", port)
    go func(){
        grpcServer.Serve(listener)
    }()
}


func (s *Server) GetCsvData(ctx context.Context, cd *service_av1.DataRequest)(*service_av1.DataResponse, error){
     log.Printf("Handle GetCsvData", "token", cd.GetToken())

     CsvData := LoadCsvData()
     return &service_av1.DataResponse{OrdersA: CsvData},nil
   }
